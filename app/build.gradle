/**
 * buildscript 设置脚本的运行环境
 */
buildscript {
    repositories {
//        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
//        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'

/**
 * repositories 支持java 依赖库管理（maven/ivy）,用于项目的依赖
 */
repositories {
//    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

/**
 * android 设置编译android项目的参数，接下来，
 * 我们的构建android项目的所有配置都在这里完成
 */
android {
    compileSdkVersion 28
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "com.hongri.recyclerview"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 100
        versionName "1.0.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    // 渠道包定义，默认定义的名称就是渠道名称
    productFlavors {
        dev {
            dimension "version"
            //TODO 需注意这样设置的的话 applicationid 会变成 com.hongri.recyclerview.dev
            applicationIdSuffix ".dev"
            //TODO versionName会变成 1.0.0-dev
            versionNameSuffix "-dev"
        }          // 测试
        baidu {
            dimension "version"
            applicationIdSuffix ".baidu"
            versionNameSuffix "-baidu"
        }        // 百度手机助手
        yingyongbao {
            dimension "version"
            applicationIdSuffix ".yingyongbao"
            versionNameSuffix "-yingyongbao"
        }   // 应用宝
//        m360 {}         // 360手机助手
//        pp {}           // PP助手
//        anzhi {}         // 安智市场
//        xiaomi {}       // 小米商店
//        letv {}         // 乐视商店
//        huawei {}       // 华为商店
//        lenovomm {}     // 联想乐商店
//        other {}        // 其他市场
//        official {}      // 官方版本

    }

    // 批量渠道包值替换
    productFlavors.all { flavor ->
        // 各个渠道包， APP_STORE_CHANNEL 是根据你AndroidManifest.xml来配置的，请看下面。
        flavor.manifestPlaceholders = [APP_STORE_CHANNEL: name]
    }

    // 输出文件配置
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def dirName = outputFile.parent // 输出文件夹所在的位置

                // 文件名修改
                def fileName = "app-${output.processResources.variantName}-${defaultConfig.versionName}-${variant.flavorName}-${releaseTime()}.apk"

                // 比如不想这么麻烦，直接在后面加上版本号也行：
                // def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}.apk")

                output.outputFileName = fileName/*new File(dirName, fileName)*/
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
/**
 *  依赖包的定义。支持maven/ivy，远程，本地库，也支持单文件，
 *  如果前面定义了repositories{}maven 库，使用maven的依赖
 *  的时候只需要按照用类似于com.android.tools.build:gradle:0.4，
 *  gradle 就会自动的往远程库下载相应的依赖。
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    compile('com.crashlytics.sdk.android:crashlytics:2.5.7@aar') {
//        transitive = true;
//    }
//    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.3@aar') {
//        transitive = true;
//    }
    compile files('libs/nineoldandroids-2.4.0.jar')
    //    compile 'com.nineoldandroids:nineoldandroids:2.4.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    testImplementation 'junit:junit:4.12'
    compileOnly 'com.mcxiaoke.volley:library:1.0.+'
    implementation files('libs/rebound-0.3.8.jar')
}

//crashlytics {
//    enableNdk true
//    androidNdkOut 'src/main/obj'
//    androidNdkLibsOut 'src/main/libs'
//}
